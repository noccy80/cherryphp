<?php

/*
//LOADER:BEGIN
require('cherryphp.php');
App::bootstrap(__FILE__);
//LOADER:END
*/

//LOADER:BEGIN
if (!( @include_once "lib/bootstrap.php" )) {
    $libpath = getenv('CHERRY_LIB');
    if (!$libpath) {
        fprintf(STDERR,"Define the CHERRY_LIB envvar first.");
        exit(1);
    }
    require_once($libpath.'/lib/bootstrap.php');
}
//LOADER:END

App::bundles()->load('cherry.mvc');
use Cherry\Mvc\Document;
use Cherry\Mvc\Response;
use Cherry\Mvc\Request;
use Cherry\Mvc\Html;
use Cherry\Traits\SingletonAccess;

class AdHocRouter {
    use SingletonAccess;
    private
            $request = null,
            $response = null,
            $routes = [];

    public function __construct() {
        $this->request = new Request();
        $this->response = new Response();
    }
    public function route() {
        foreach($this->routes as $rule=>$route) {
            $re = str_replace('/','\/',$rule);
            $re = str_replace(':str','[a-zA-Z]*',$re);
            $match = [];
            if (preg_match("/^{$re}/",$this->request->getUri(),$match)) {
                list($tctl,$tparms) = explode(':',$route);
                $tcclass = explode('/',$tctl);
                $tcmethod = array_pop($tcclass);
                $tparms = explode(',',$tparms);
                $tcargs = [];
                foreach($tparms as $parm) {
                    if ($parm[0] == '$') {
                        $tcargs[] = $match[intval(substr($parm,1))];
                    }
                }
                if (count($tcclass) == 1) {
                    // Append app namespace
                    $tcclass = $tcclass[0].'Controller';
                } else {
                    $tcclass = "\\".join("\\",$tcclass).'Controller';
                }
                $ctl = new $tcclass($this->request, $this->response);
                $ctl->invoke($tcmethod,$tcargs);
                return true;
            }
        }
    }
    public function addRoutes($routes) {
        $routes = (array)$routes;
        $this->routes = array_merge($this->routes,$routes);
    }
}

class TestController {
    private
            $request = null,
            $response = null;

    public function __construct(Request $request, Response $response) {
        $this->request = $request;
        $this->response = $response;
    }
    public function invoke($action,$args) {
        // Begin the document, and assign it as the response document
        $doc = Document::begin(Document::DT_HTML5,'en-us','UTF-8');
        $this->response->setDocument($doc);
        $this->setup($doc);
        call_user_func_array([$this,$action.'Action'], array_merge([$doc],$args));
        //$this->indexAction($doc);
        // Output the document
        $this->response->output();
    }
    public function setup(Document $doc) {
        // Meta headers, scripts and styles.
        $doc->setMeta('language','english');
        $doc->setMeta('noccylabs.sdip','sdip=1;hash=2;salt=2');
        $doc->setTitle('Untitled Document');
        $doc->addScript('/js/prototype.js','text/javascript');
        $doc->addStyleSheet('/css/main.css');
        $css = 'body { background-color:#E0E0E0; } .box { background-color:#F0F0F0; } ';
        $doc->addInlineStyleSheet($css);
        $js = 'function yay() { alert("Wohoo!"); }';
        $doc->addInlineScript($js);
    }
    public function viewAction(Document $doc, $id = null) {
    
        echo "Displaying ID ".$id;
    
    }
    public function indexAction(Document $doc, $sub1 = null, $sub2 = null) {

        // Now output whatever the document should contain
        //echo "<h1>Document source:</h1>";
        //highlight_string(file_get_contents(__FILE__));
        echo html::h1('Welcome to CherryPHP');
        echo html::div(
            html::p(
                "Hello World! Click {link} for awesomeness! {span}",
                [ 'class'=>'foo', 'style'=>'color:red;' ],
                [
                    'link' => html::a('Here',[ 'href'=>'javascript:yay();' ]),
                    'span' => html::span('This is a text span.',[ 'style'=>'color:blue;' ]),
                ]
            ).
            html::p(
                "Arguments: 1:{first} 2:{second}", [],
                [
                    'first' => $sub1,
                    'second' => $sub2
                ]
            ).
            html::p(
                "You just did a <strong>HTTP {method}</strong> to the URI {uri}<br>Your user agent is {ua}",
                [],
                [
                    'method' => $this->request->getMethod(),
                    'uri' => $this->request->getUri(),
                    'ua' => $this->request->getHeader('User-Agent')
                ]
            ),
            [ 'class'=>'box' ]
        );

        echo html::pre(print_r($_SERVER,true), [ 'style'=>'background-color:#F0F0F0; border:solid 1px #808080; padding:5px;' ]);

    }
}

$r = AdHocRouter::getInstance();
$r->addRoutes([
    '/post/(.*)' => 'test/view:$1',
    '/(:str)/(:str)' => 'test/index:$1,$2',
    '/(:str)' => 'test/index:$1',
    '/' => 'test/index'
]);
$r->route();
