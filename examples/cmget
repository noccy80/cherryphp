#!/usr/bin/php
<?php

//LOADER:BEGIN
if (!( @include_once "lib/bootstrap.php" )) {
    $libpath = getenv('CHERRY_LIB');
    if (!$libpath) {
        fprintf(STDERR,"Define the CHERRY_LIB envvar first.");
        exit(1);
    }
    require_once($libpath.'/lib/bootstrap.php');
}
//LOADER:END

$lepton = new \cherry\Lepton(__FILE__);

use cherry\base\Event;
use cherry\base\EventEmitter;
use cherry\BundleManager;
use Cherry\Extension\ExtensionManager;

BundleManager::load('cherry.net');
BundleManager::load('cherry.crypto');
BundleManager::load('cherry.util');

$lepton = new \cherry\Lepton(__FILE__);

class CmgetApplication extends \cherry\Cli\Application {
    protected $apppath = null;
    protected $route = false;
    protected $config = 'development';
    /**
     * Init is called when the application is created. This is the perfect place to
     * register command line arguments, hook events and set up defaults.
     */
    function init() {
    
        // Help:  -h or --help
        $this->addArgument('h','help',
                            'Show this help');
        // Application path:  -a path or --app path
        // Bound to $this->apppath
        $this->addArgument('a:','app',
                            'Application path (default: ./application)',
                            array($this,'apppath'));
        // Invoke via router:  -r or --route
        // Bound to $this->router
        $this->addArgument('r','route',
                            'Invoke request via application router', 
                            array($this,'route'));
        // Configuration to use:  -c or --config
        $this->addArgument('c','config',
                            'Configuration to use',
                            array($this,'config'));

        // Bind events that we can find useful
        Event::observe('onbeforeapplication',array($this,'onBefore'));
        Event::observe('onafterapplication',array($this,'onAfter'));
        
        // Set some defaults (arguments are not parsed yet)
        $this->apppath = './application';
    }
    function onBefore() {
    }
    function onAfter() {
        \cherry\log(\cherry\LOG_DEBUG,'Cleaning up...');
    }
    /**
     * Main function, when we get here everything has been parsed and loaded Ok.
     */
    function main() {
        if (($this->hasArgument('h'))
        || (count($this->parameters) == 0)) {
            $this->usage();
            return 1;
        }
        
        $mpx = new \Cherry\Io\StreamMultiplexer(null,500);
        $sopts = array(
            'http' => array(
                'method' => 'GET'
            )
        );
        \Cherry\Debug("Creating stream context...");
        $ctx = stream_context_create($sopts);
        \Cherry\Debug("Adding stream to multiplexer");
        $mpx->addStream(fopen('http://noccy.com/','r',NULL,$ctx));
        $mpx->addStream(fopen('http://google.com/','r',NULL,$ctx));
        \Cherry\Debug("Polling streams");
        while(1) {
            usleep(10000);
            if ($mpx->select()) {
                $streams = $mpx->getReadableStreams();
                foreach($streams as $streamid=>$stream) {
                    var_dump(stream_get_meta_data($stream)); die();
                    echo $streamid.": ".fread($stream,1024);
                }
            }
        }
        \Cherry\Debug("Done.");
        
    }
    
    /**
     * Function to return some basic application information
     */
    function getApplicationInfo() {
        return array(
            'appname' => 'Cherry MultiGet',
            'version' => '1.0',
            'description' => 'Get anything from anywhere in parallel',
            'copyright' => "Copyright (c) 2012, The CherryPHP Project\nDistributed under GNU GPL version 3"
        );
    }
}

$lepton->runApplication(new CmgetApplication());
