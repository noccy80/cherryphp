#!/usr/bin/php
<?php

define('APPLICATION','CherryDaemon');

//LOADER:BEGIN
// Bootstrap
$libpath = getenv('CHERRY_LIB');
if (!$libpath) {
    fprintf(STDERR,"Define the CHERRY_LIB envvar first.");
    exit(1);
}
require($libpath.'/lib/bootstrap.php');
//LOADER:END

$lepton = new \cherry\Lepton(__FILE__);

// We need this to set up a CLI application
//require_once('lib/cherry/cli/application.php');
//require_once('lib/cherryutil/command.php');
//require_once('lib/cherryutil/commands/all.php');

use Cherry\BundleManager;
use cherry\Base\Event;

BundleManager::getInstance()->load('cherry.util');


class CherryDaemonApplication extends \cherry\Cli\Application {
    protected $apppath = null;
    protected $route = false;
    protected $config = 'development';
    protected $con = null;
    
    protected $fsipc = null;
    protected $hsipc = null;
    /**
     * Init is called when the application is created. This is the perfect place to
     * register command line arguments, hook events and set up defaults.
     */
    function init() {

        // Help:  -h or --help
        $this->addArgument('h','help',
                            'Show this help');

        $this->addArgument('s:','socket',
                            'Unix socket for communication with process',
                            array($this,'fsipc'));

        $this->con = \Cherry\Cli\Console::getAdapter();

    }

    /**
     * Main function, when we get here everything has been parsed and loaded Ok.
     */
    function main() {
    
        if ($this->hasArgument('h')) {
            $this->usage();
            return 1;
        }

        if (!$this->hasArgument('s')) {
            echo "You are not supposed to call this tool without any arguments.\n";
            return 1;
        }
        // Initialize the sockets
        $this->initSockets();
        // Initialize the task
        $this->initTask();
        // Run the task
        $this->runTask();

    }
    
    private function initSockets() {
    
        // Open the socket
        $this->hsipc = new UnixSocket($this->fsipc);
    
        return true;
    
    }
    
    private function initTask() {
        return true;
    }
    
    private function runTask() {
    
    }

    function usagecommands() {

    }

    function usageinfo() {

    }

    /**
     * Function to return some basic application information
     */
    function getApplicationInfo() {
        return array(
            'appname' => 'CherryDaemon',
            'version' => '1.0',
            'description' => 'CherryPHP single-client daemon',
            'copyright' => "Copyright (c) 2012, The CherryPHP Project\nDistributed under GNU GPL version 3"
        );
    }
}

$app = new CherryDaemonApplication(dirname(__FILE__));
$app->run();
// $lepton->runApplication($app);
