#!/usr/bin/php
<?php require('lepton-ng');
/**
 * Higgs, the flexible Socket Daemon for Lepton
 *
 */

using('lepton.utils.prefs');
using('lepton.utils.cache');

/**
 *
 */
class Higgs {

    // Protocol types
    const PROTO_HTTP      = 0x01;
    const PROTO_WEBSOCKET = 0x02;
    const PROTO_S2S       = 0x04;
    const PROTO_LDWP      = 0x08;
    const PROTO_TELNET    = 0x10;
    const PROTO_HTTPS     = 0x21;

    /**
     * @brief Log a message
     */
    static function log($fmt) {
        $args = func_get_args();
        printf("[%s] ",date('D M d H:i:s'));
        call_user_func_array('printf',$args);
        printf("\n");
    }
}

/**
 * 
 */
class HiggsApplication extends ConsoleService {

    const MAJOR = 0;
    const MINOR = 1;

    private $config = null;
    private $serversockets = array();
    private $serversessions = array();
    private $sockets = array();
    private $sessions = array();

    /**
     * @brief Initialization code for application
     */
    function init() {
        $this->description = 'Versatile HTTP/CGI/WebSocket/Proxy Daemon';
        $this->arguments->register('h','help','Show this help');
        $this->arguments->register('d','daemon','Fork to the background');
        $this->arguments->register('s','server','Start server (overridden by -d)');
        $this->arguments->register('c:','config','Read configuration from file');
        $this->arguments->register('L:','log','Name of log file to append to');
        $this->arguments->register('r','resource','Show resource usage');
    }

    /**
     * @brief Main function for application
     *
     * @param int $argc Argument count
     * @param array $argv Argument values
     */
    function main($argc,$argv) {
        if ($this->hasArgument('h')) {
            $this->usage();
            return 1;
        }
        if ($this->hasArgument('d')) {
            $this->fork();
        } else {
            if ($this->hasArgument('s')) {
                $this->servicemain();
            } else {
                $this->config = new FsPrefs('.higgscfg');
                $params = $this->getParameters();
                if (count($params) == 0) { $this->usage(); return 1; }
                switch ($params[0]) {
                case 'set':
                    foreach(array_slice($params,1) as $param) {
                        if (strpos($param,'=')!==false) {
                            $hp = explode('=',$param);
                            $hh = $hp[0];
                            $hv = join(' ',array_slice($hp,1));
                            $this->config->set($hh,$hv);
                            Higgs::log('Set config %s to %s', $hh, $hv);
                        }
                    }
                    break;
                case 'get':
                    $cfg = $this->config->getAll();
                    debug::inspect($cfg);
                    break;
                }
            }
        }
    }
    
    /**
     * @brief SIGINT signal handler
     *
     * Responsible for a clean shutdown when Ctrl-C has been pressed or the
     * kill utility has been used to dispatch the signal.
     */
    function signal_int() {
        printf("\nShutting down.\n");
        foreach($this->serversockets as $sock) {
            @socket_close($sock);
        }
        foreach($this->sockets as $sock) {
            $this->disconnect($sock);
        }
        exit(1);
    }
    
    /**
     * @brief Service main function
     */
    function servicemain() {

        // Attach the signals we want to listen to and load the config
        $this->attachSignal(SIGINT, array($this,'signal_int'));
        $this->attachSignal(SIGTERM, array($this,'signal_int'));
        $this->config = new FsPrefs('.higgscfg');

        // Initialize data
        if ($this->config->get('maxsockets',0) <= 0) $this->config->maxsockets = 25;
        if ($this->config->get('timeout',0) <= 0) $this->config->timeout = 90;

        Higgs::log("Higgs %d.%d starting up [maxsockets=%d, timeout=%ds]", self::MAJOR, self::MINOR, $this->config->maxsockets, $this->config->timeout);

        // Start the servers
        $this->startServer(Higgs::PROTO_HTTP | Higgs::PROTO_WEBSOCKET, 'localhost', 8800, 'HttpSessionHandler');
        $this->startServer(Higgs::PROTO_HTTP | Higgs::PROTO_WEBSOCKET, '*', 8801, 'HttpSessionHandler');
        $tmr = new Timer(true);
        $req = 0; $rps = 0;
        $redraw = true;
        while(true){
            if ($tmr->getElapsed()>=10) {
                $rps = $req / $tmr->getElapsed();
                $req = 0;
                $tmr->start();
            }
            if ($this->hasArgument('r')) {
                static $rt = 0;
                $rt++;
                if ($rt>=50) {
                    $rt = 0;
                    console::clearLine();
                    $redraw = true;
                }
                if ($redraw) {
                    $cs = cache::getStats();
                    $la = sys_getloadavg();
                    console::write(__astr("\b{srv}:%d \b{clt}:%d \b{rps}:%.2f | " .
                        "\b{mem}:%0.2f\g{mB} \b{tot}:%0.2f\g{mB} | " .
                        "\b{sys}:%.2f %.2f %.2f | " .
                        "\b{cache}:%s \b{hit}:%d \b{miss}:%d \b{eff}:%.1f%% \b{size}:%s"), 
                        count($this->serversockets), count($this->sockets), $rps,
                        (memory_get_usage() / 1024 / 1024), (memory_get_usage(true) / 1024 / 1024),
                        $la[0], $la[1], $la[2],
                        cache::getBackend(),
                        $cs['cachehits'], $cs['cachemiss'], $cs['efficiency'], $cs['size']
                    );
                    $redraw = false;
                }
            }
            $changed = array_merge($this->serversockets,$this->sockets);
            socket_select($changed,$write=NULL,$except=NULL,0,100000);
            if (count($changed)>0) { $redraw = true; console::clearLine(); }
            foreach($changed as $socket){
                $req++;
                if (arr::hasValue($this->serversockets,$socket)) {
                    $server = $this->getserver($socket);
                    $client = socket_accept($socket);
                    if($client<0){ 
                        Higgs::log("socket_accept() failed"); continue; 
                    } else {
                        $this->connect($client,$server);
                    }
                } else{
                    $bytes = @socket_recv($socket,$buffer,2048,0);
                    if($bytes==0) { 
                        $this->disconnect($socket);
                    } else {
                        $sess = $this->getConnection($socket);
                        $sess->activity();
                        $sess->receive($buffer);
                        if ($sess->canClose) $this->disconnect($socket);
                        /*
                        if(!$user->handshake){ dohandshake($user,$buffer); }
                        else{ process($user,$buffer); }*/
                    }
                }
            }
            if ($this->config->enforcetimeout) {
                foreach($this->sockets as $socket) {
                    $sess = $this->getConnection($socket);
                    if ($sess->getInactivity()>$this->config->timeout) {
                        Higgs::log("Session timeout (%s) after %ds", $socket, $sess->getInactivity());
                        $this->disconnect($socket);
                    }
                }
            }
        }
    }

    /**
     * @brief Get a server instance
     */
    function getserver($socket) {
        $found = NULL;
        foreach($this->serversessions as $sess){
            if($sess['socket'] == $socket){ $found = $sess; break; }
        }
        return $found;    
    }

    /**
     * @brief Get a client instance
     */
    function getconnection($socket) {
        $found = NULL;
        foreach($this->sessions as $sess){
            if($sess->socket==$socket){ $found = $sess; break; }
        }
        return $found;    
    }

    /**
     * @brief Set up a socket
     */
    function connect($socket,$server) {
        $ip = null; $port = null;
        $rip = null; $rport = null;

        socket_getsockname($socket, $ip, $port);
        socket_getpeername($socket, $rip, $rport);

        $sess = new $server['handler']($socket);
        $sess->local = array($ip, $port);
        $sess->remote = array($rip, $rport);
        $sess->id = uniqid();
        $sess->socket = $socket;
        $this->sessions[] = $sess;
        
        $this->sockets[] = $socket;
        Higgs::log("%s: Connected to %s:%d [%s:%d] (via %s)", $socket, $rip, $rport, $ip, $port, $server['handler']);
    }
    
    /**
     * @brief Disconnect a socket
     */
    function disconnect($socket) {

        $sess = $this->getConnection($socket);
        list($ip,$port) = $sess->remote;
        Higgs::log("%s: Disconnected [%s:%d]", $socket, $ip, $port);

        $found = null;
        $n = count($this->sessions);
        for ($i=0; $i<$n; $i++) {
            if ($this->sessions[$i]->socket==$socket) { $found=$i; break; }
        }
        if (!is_null($found)) {
            array_splice($this->sessions,$found,1);
        }
    
        $index = array_search($socket,$this->sockets);
        socket_close($socket);
        if($index>=0) array_splice($this->sockets,$index,1);
    }
    
    /**
     * @brief Start a server instance with a handler.
     *
     * @param int $protocol The protocol flags
     * @param string $host The host to bind to (or '*')
     * @param int $port The port to listen on
     * @param SessionHandler $handler The handler to use for this connection
     */
    function startServer($protocol, $host, $port, $handler) {
        Higgs::log("Starting server on %s:%d (type=0x%02x)", $host, $port, $protocol);
        if ($host=='*') {
            $socket = socket_create_listen($port);    	
            socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)    or die("socket_option() failed\n");
        } else {
            $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)     or die("socket_create() failed\n");
            socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)    or die("socket_option() failed\n");
            socket_bind($socket, $host, $port)                         or die("socket_bind() failed\n");
            socket_listen($socket,20)                                  or die("socket_listen() failed\n");
        }
        $this->serversockets[] = $socket;
        $this->serversessions[] = array(
            'socket' => $socket,
            'handler' => $handler,
            'protocol' => $protocol
        );
        return $socket;
    }


}


abstract class SessionHandler {
    public $socket = null;
    public $id = null;
    public $proto = null;
    public $local = array();
    public $remote = array();
    public $canClose = false;
    protected $lastactivity = null;
    private $handler = null;
    abstract function receive($data);
    abstract function __construct($socket,$data);
    public function activity() {
        $this->lastactivity = microtime(true);
    }
    public function getInactivity() {
        if (!$this->lastactivity) return 0;
        return microtime(true) - $this->lastactivity;
    }
}

define('WWW_ROOT','/home/noccy/wwwshare/');
class HttpSessionHandler extends SessionHandler {
    private $plugins = array();
    private $headers = array();
    private $handler = null;
    public function __construct($socket) {
        $this->socket = $socket;
        $this->plugins[] = new HttpAuthBasic($socket);
        $this->plugins[] = new HttpWebsocket($socket);
    }
    public function receive($data) {
        // If a handler is assigned, we just pass it on, unless receive returns true
        if ($this->handler) {
            if ($this->handler->receive($data)) $this->handler = null;
            return;
        }
        $arrhdr = explode("\n", $data);
        list($method,$uri,$proto) = explode(" ", $arrhdr[0]);
        $method = strToUpper($method);
        $uri = urldecode($uri);
        foreach(array_slice($arrhdr,1) as $hdr) {
            $hdr = trim($hdr);
            if ($hdr) {
                $hdr = explode(': ',$hdr);
                $hk = $hdr[0];
                $hv = join(': ',array_slice($hdr,1));
                $this->headers[strToLower($hk)] = $hv;
            }
        }
        foreach($this->plugins as $plugin) {
            if ($plugin->request($method,$uri,$this->headers)) {
                if ($plugin->sethandler) $this->handler = $plugin;
                return true;
            }
        }
        if (strpos($uri,'?')!==false) {
            $location = arr::head(explode('?',$uri));
        } else {
            $location = $uri;
        }
        
        switch($method) {
        case 'HEAD':
            break;
        case 'GET':
            $file = WWW_ROOT.$location;
            if (file_exists($file)) {
                $uid = sha1($file);
                try {
                    //throw new CacheException(); // Give fresh data
                    $content = cache::get($uid);
                    $ctype = cache::get($uid.'.type');
                } catch (CacheException $e) {
                    $content = file_get_contents($file);
                    $ctype = trim(shell_exec('mimetype -b '.WWW_ROOT.$uri));
                    try {
                        cache::set($uid,$content,'5m');
                        cache::set($uid.'.type',$ctype);
                    } catch (CacheException $e) { }
                }
                $clen = strlen($content);
                Higgs::log("%s: %s 200 %s (%s) %d bytes", $this->socket, $method, $uri, $ctype, $clen);

                $minutes = 5;
                $maxage = 60 * $minutes;
                // header('Last-Modified: ' . gmdate( 'D, d M Y H:i:s', time() ) . ' GMT', true);
                $expires = gmdate("D, d M Y H:i:s", time() + $maxage) . ' GMT';
                $headers = "HTTP/1.1 200 Found\n" .
                            "Server: Lepton Higgs/1.0\n" .
                            "Content-Type: {$ctype}\n" .
                            "Location: {$location}\n" .
                            "Connection: keep-alive\n" .
                            "Content-Length: {$clen}\n" .
                            "Expires: {$expires}\n" .
                            "Cache-Control: max-age={$maxage}\n" .
                            "Pragma: public\n" .
                            "\n";
                socket_write($this->socket,$headers);
                socket_write($this->socket,$content);
            } else {
                $content = "File Not Found.";
                $clen = strlen($content);
                Higgs::log("%s: %s 404 %s", $this->socket, $method, $uri);
                $headers = "HTTP/1.1 404 Not Found\n" .
                            "Server: Lepton Higgs/1.0\n" .
                            "Content-Type: text/html\n" .
                            "Connection: Close\n" .
                            "Location: {$uri}\n" .
                            "Content-Length: {$clen}\n" .
                            "\n";
                socket_write($this->socket,$headers);
                socket_write($this->socket,$content);
                $this->canClose = true;
            }
            break;
        case 'POST':
        case 'PUT':
        case 'DELETE':
        case 'OPTIONS':
        default:
            Higgs::log("%s: %s 400 %s", $this->socket, $method, $uri);
            $content = 'Unsupported Method.';
            $clen = strlen($content);
            $headers = "HTTP/1.1 400 Unsupported Method\n" .
                        "Server: Lepton Higgs/1.0\n" .
                        "Content-Type: text/html\n" .
                        "Connection: Close\n" .
                        "Location: {$uri}\n" .
                        "Content-Length: {$clen}\n" .
                        "\n";
            socket_write($this->socket,$headers);
            socket_write($this->socket,$content);
            $this->canClose = true;
        
        }
    }
}

class W3CLogger {
    private $file = null;
    private $hfile = null;
    private $fieldsdef = array();
    public function __construct($file,$fields) {
        $this->file = $file;
        $this->hfile = fopen($file,'a+');
        $this->fieldsdef = array(
            'date', 'time', 'time-taken', 'bytes', 'cached' 
        );
        $pref = array('c', 's', 'r', 'cs', 'sc', 'sr', 'rs', 'x');
        $fpref = array('ip', 'dns', 'status', 'comment', 'method', 'uri', 'uri-stem', 'uri-query');
        foreach($pref as $prefp) foreach($fpref as $fprefp) $this->fieldsdef[] = $prefp.'-'.$fprefp;
    }
    public function log(array $data) {
        foreach($this->fieldsdef as $field) {
            
        }
    }

}

abstract class HttpPlugin {
    protected $socket;
    public $sethandler = false;
    public function __construct($socket) {
        $this->socket = $socket;
    }
    abstract function request($method,$uri,$headers);
}
class HttpAuthBasic extends HttpPlugin {
    function request($method,$uri,$headers) {
    
    }
}
class HttpWebsocket extends HttpPlugin {
    const WEBSOCKET_KEY = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
    const OP_CONT = 0x00;
    const OP_TEXT = 0x01;
    const OP_BINARY = 0x02;
    const OP_CLOSE = 0x08;
    const OP_PING = 0x09;
    const OP_PONG = 0x0A;
    function request($method,$uri,$headers) {
        // Websocket handshakes are only allowed as GET requests
        if ($method != 'GET') return;
        // Log, and look for the appropriate headers
        if (arr::hasKey($headers,'upgrade') && ($headers['upgrade'] == 'websocket')) {
            if (arr::hasKey($headers,'connection') && (strToLower($headers['connection']) == 'upgrade')) {
                $origin = $headers['origin'];
                /*
                $headers['sec-websocket-version'];
                $protocol = $headers['sec-websocket-protocol'];
                $extensions = $headers['sec-websocket-extensions'];
                */
                $key = $headers['sec-websocket-key'];
                // Create response to challenge key
                $accept = sha1($key.self::WEBSOCKET_KEY);
                $accepts = '';
                for($n = 0; $n < 20; $n++) {
                    $d = hexdec(substr($accept,$n*2,2));
                    $accepts.= chr($d);
                }
                $accept = base64_encode($accepts);
                // And send it
                $hr = "HTTP/1.1 101 Switching Protocols\r\n" .
                        "Server: Lepton Higgs/1.0\n" .
                        "Upgrade: WebSocket\r\n" .
                        "Connection: Upgrade\r\n" .
                        "Sec-WebSocket-Accept: {$accept}\r\n" .
                        "\r\n";
                socket_write($this->socket,$hr);
                Higgs::log("%s: WebSocket handshake completed.", $this->socket);
                $this->sethandler = true;
                return true;
            }
    
        }
    }
    function receive($data) { 
        $dp = 0;
        $h1 = ord($data[$dp++]); 
        $_fin = $h1 & 0x80;    // X-------
        $_opcode = $h1 & 0xF;  // ----XXXX
        $h2 = ord($data[$dp++]);
        $_mask = $h2 & 0x80;   // X-------
        $_len = $h2 & 0x7F;    // -XXXXXXX
        if ($_len >= 126) {	// 16 more bits
            $pl = substr($data,$dp,2); $dp+=2;
            $_len = $_len << 16 | ord($pl[0])<<8 | ord($pl[1]);
            if ($_len == 127) { 
                $pl = substr($data,$dp,4); $dp+=4;
                $_len = $_len << 32 | ord($pl[0])<<24 | ord($pl[1])<<16 | ord($pl[2])<<8 | ord($pl[3]);
            }
        }

        if ($_mask) {
            $_maskdata = substr($data,$dp,4); $dp+=4;
        } else {
            // This should close the connection according to the specs.
            $_maskdata = null;
        }
        $data = substr($data,$dp,$_len);
        if ($_maskdata) {
            $ndata = '';
            for($n=0;$n<strlen($data);$n++) {
                $h = ord($data[$n]) ^ ord($_maskdata[$n % 4]);
                $ndata.= chr($h);
            }
            $data = $ndata;
        }
        switch($_opcode) {
            case self::OP_CONT:
                $_type = 'Continuation';
                break;
            case self::OP_TEXT:
                $_type = 'Text frame';
                switch($data) {
                case 'hello':
                    socket_write($this->socket,$this->buildTextResponse("Hello there"));
                    break;
                default:
                    socket_write($this->socket,$this->buildTextResponse("This is Higgs talking"));
                    break;
                }
                break;
            case self::OP_BINARY:
                $_type = 'Binary frame';
                break;
            case self::OP_CLOSE:
                $_type = 'Close';
                break;
            case self::OP_PING:
                $_type = 'PING';
                socket_write($this->socket,$this->buildPong());
                break;
            case self::OP_PONG:
                $_type = 'PONG';
                break;
            default:
                // Should really give error here.
        }
        Higgs::log("%s: WebSocket %s(len=%d, type=%s): %s", $this->socket, ($_fin?__astr('[\b{FIN}] '):'').($_mask?'[MASK] ':__astr('[\b{NOMASK}] ')), $_len, $_type, $data);
    }
    function buildTextResponse($text) {
        $_mask = chr(rand(0,255)).chr(rand(0,255)).chr(rand(0,255)).chr(rand(0,255));
        $ndata = '';
        for($n=0;$n<strlen($text);$n++) {
            $h = ord($text[$n]) ^ ord($_mask[$n % 4]);
            $ndata.= chr($h);
        }
        $data = $ndata;		
        $ret = chr(0x81).chr(0x80 | strlen($text)).$_mask.$data;
        return $ret;
    }
    function buildPong() {
        $ret = chr(0x8A).chr(0x00);
        return $ret;
    }
    function write($data) {
        socket_write($this->socket,$this->buildTextResponse($data));
    }
}

abstract class SessionTaskBase {
}
abstract class AsyncSessionTaskBase extends SessionTaskBase {
    private $fin, $hin;
    private $fout, $hout;
    private $client = false;
    private $clientpid = null;
    abstract function mainloop();
    function __construct() {
        // Setup names
        $this->fin = '/tmp/higgs/'.uniqid('fifo',true);
        $this->fout = '/tmp/higgs/'.uniqid('fifo',true);
        // Create two fifos
        posix_mkfifo($this->fin,0666);
        posix_mkfifo($this->fout,0666);
    }
    function __destruct() {
        if ($this->hin) fclose($this->hin);
        if ($this->hout) fclose($this->hout);
        if (!$client) {
            posix_kill($this->clientpid, SIGINT);
            pcntl_signal_dispatch();
            unlink($this->fin);
            unlink($this->fout);
        }
    }
    function initialize() {
        $this->clientpid = pnctl_fork();
        if ($this->clientpid == 0) {
            $this->client = true;
            $this->hin = fopen($this->fin,'r');
            $this->hout = fopen($this->fout,'w');
            $this->mainloop();
        } else {
            $this->hin = fopen($this->fout,'r');
            $this->hout = fopen($this->fin,'w');
        }
    }
    function dataWaiting() {
        return (!feof($this->hin));
    }
    function readData() {
        return fgets($this->hin);
    }
    function writeData($data) {
        fputs($this->hout,$data);
    }
}

class SocketTask extends AsyncSessionTaskBase {
    private $server = null;
    private $port = null;
    private $opts = array();
    private $sck = null;
    function __construct($server,$port,array $opts=null) {
        $this->server = $server;
        $this->port = $port;
        $this->opts = $opts;
    }
    function onsigint() {
    
    }
    function mainloop() {
        pnctl_signal(SIGINT,array($this,'onsigint'));
        $this->sck = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        socket_connect($this->sck,$this->server,$this->port);
        while(true) {
            if ($this->dataWaiting()) {
                $data = $this->readData();
            }
            
        }
    }
}

lepton::run('HiggsApplication');
