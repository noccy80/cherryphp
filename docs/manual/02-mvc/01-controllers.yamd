title: Controllers
description: What are controllers and what do they do?
author: Christopher Vagnetoft
keywords:
---

# Controllers: What are they and what do they do?

In the MVC dictionary a controller is a class that is responsible for handling
actions that are sent to the web application. In CherryPHP they are all descendants
of the `\cherry\Mvc\Controller\Base` class, and a number of helpful varieties are
available. These include:

 * ***\cherry\Mvc\Controller\Simple*** is a very simple controller that wraps
   most of the complex functionality into calls to `initialize()` and to a
   function composed of the controller method followed by the word Action, 
   for example `indexAction`.
 * ***\cherry\Mvc\Controller\Basic*** gives you a bit more control while wrapping
   methods that can't be located into a special `unknown()` method along with
   some other helpful traits.

When a request is received by the web server, it is directed to the single loader
script normally found at `public/index.php`. The redirection to this script
should be done by `mod_rewrite` or similar.

What this script does is fire up an instance of the application class, which is
normally a `\cherry\Mvc\Application`


## Example controllers

### Basic controller invoking a view inside a frame

    <?php
    
    namespace MyApp\Controllers;
    use Cherry\Mvc\Controller;
    use Cherry\Mvc\Views\PhpView;
    
    class IndexController extends Controller {
    
        public function initialize() {
            // Create the view and initialize it to a frame with a
            // placeholder for the rendered view.
            $this->decorator = new PhpView('frames/default.phtml');
        }
    
        public function indexAction() {
            // Load the view 
            $this->view = new PhpView('index/index.phtml');
        }
    
    }

## Managing views

### Invoking a view

        public function indexAction() {
            // Load the view 
            $this->view = new PhpView('index/index.phtml');
            $this->view->sitename = 'My Site';
        }

You can pass data on to the view through the view as properties.

## Content in all its glory

### Embedding the content in the frame

Embedding is done with the "magic" tag <@content/>. This tag can take an `encoding` attribute 
to encode the output data before inserting it:

    <@content encoding="base64" />

You can safely omit the `/` at the end of the tag if it makes you feel uncomfortable.
The complete list of attributes that are available are:

<dl>
<dt><code>encoding="<em>encoding</em>"</code></dt>
    <dd>Encode the content using the specified encoding scheme. This can be used to output Base64-encoded content among other things.</dd>
<dt><code>id="<em>view-id</em>"</code></dt>
    <dd>Select the view previously added with <code>setView(<em>view-id</em>,<em>view</em>)</code>.</dd>
</dl>

### Embedding widgets

Embedding widgets.

    <@embed type="widget" class="Shoutbox" scope="session">

